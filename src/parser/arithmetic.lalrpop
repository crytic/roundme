use std::str::FromStr;
use std::cell::RefCell;
use crate::analyzer::ast::{Expr, Opcode, Rounding};

use lalrpop_util::ParseError;

grammar;

Tier<Op, NextTier>: Box<Expr> = {
    Tier<Op, NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

pub Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul(RefCell::new(Rounding::Init)),
    "/" => Opcode::Div(RefCell::new(Rounding::Init)),
    "**" => Opcode::Pow,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "-" <Num> => Box::new(Expr::Negative(Box::new(Expr::Number(<>)))),

    Id =>  Box::new(Expr::Id(<>)),
    "-" <Id> => Box::new(Expr::Negative(Box::new(Expr::Id(<>)))),
    
    "-(" <Expr> ")" => Box::new(Expr::Negative(<>)),
    "(" <Expr> ")"
};

Num: u32 = {
    r"[0-9]+" =>? u32::from_str(<>)
        .map_err(|_| ParseError::User {
            error: "number is too big"
        })
};

Id: String = {
    r"[a-zA-Z]+" =>? String::from_str(<>)
        .map_err(|_| ParseError::User {
            error: "number is too big"
        })
};


